#!/usr/bin/env python3
import argparse
from datetime import datetime
from io import FileIO


C_SOURCE_OUTPUT = "open_close_times.cpp"
C_HEADER_OUTPUT = "open_close_times.h"
MONTH_COMMENT = "Open-Close times specified as 2D array for each month"
MONTH_PREFIX = "OC_TIME_"
MONTHS = [
    "JANUARY",
    "FEBRUARY",
    "MATCH",
    "APRIL",
    "JUNE",
    "JULY",
    "AUGUST",
    "SEPTEMBER",
    "OCTOBER",
    "NOVEMBER",
    "DECEMBER",
]


def print_header(f: FileIO):
    f.write(
        "/*\n * This source file was auto-generated by the sun-times-to-code.py script.\n"
    )
    f.write(f" * Generated on the {datetime.now()}.\n")
    f.write(" */\n")


def write_month_definition(f: FileIO, month_idx: int):
    f.write(f"const int {MONTH_PREFIX}{MONTHS[month_idx]}[31][4] = {{\n")
    for day_idx in range(0, 30):
        f.write(f"    {{0, 0, 0 ,0}},\n")
    f.write("};\n")


def write_month_declaration(f: FileIO, month_idx: int):
    f.write(f"extern const int {MONTH_PREFIX}{MONTHS[month_idx]}[31][4];\n")


def main():
    parser = argparse.ArgumentParser(
        "Converter script to generate look-up table code for sun times"
    )
    parser.add_argument(
        "-t", "--type", help="Output code language", choices=["c"], default="c"
    )
    args = parser.parse_args()
    if args.type == "c":
        with open(C_SOURCE_OUTPUT, "w") as f:
            print_header(f)
            f.write("\n")
            for idx in range(0, 11):
                write_month_definition(f, idx)
                f.write("\n")

        with open(C_HEADER_OUTPUT, "w") as f:
            print_header(f)
            f.write("\n")
            for idx in range(0, 11):
                write_month_declaration(f, idx)
            f.write("\n")
    else:
        print("No supported output code type detected")


if __name__ == "__main__":
    main()
